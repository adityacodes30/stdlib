/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var arraylike2object = require( '@stdlib/array/base/arraylike2object' );
var resolveGetter = require( '@stdlib/array/base/resolve-getter' );


// FUNCTIONS //

/**
* Cumulatively tests whether at least one array element in an indexed array is truthy and assigns to given output array.
*
* @private
* @param {Collection} x - input array
* @param {Collection} y - output array
* @param {integer} stride - output array stride
* @param {NonNegativeInteger} offset - output array offset
* @returns {Collection} output array
*
* @example
* var x = [ false, false, true, false, false ];
* var y = [ false, null, false, null, false, null, false, null, false, null ];
*
* var arr = indexed( x, y, 2, 0 );
* // returns [ false, null, false, null, true, null, true, null, true, null ]
*/
function indexed( x, y, stride, offset ) {
	var xTemp;
	var xMax;
	var yMax;
	var xget;
	var flag;
	var io;
	var i;

	// Resolve the maximum indexes:
	xMax = x.length - 1;
	yMax = y.length - 1;

	xget = resolveGetter( x );

	// Initialize
	flag = false;
	xTemp = [ ];

	// Logic for cumulatively testing...
	for ( i = 0; i <= xMax; i++ ) {
		if ( xget( x, i ) ) {
			flag = true;
		}
		xTemp.push( ( ( flag ) ? ( true ) : ( xget( x, i ) ) ) );
	}

	// Perform assign operation...
	io = offset;
	i = 0;
	while ( io <= yMax && i <= xMax ) {
		y[ io ] = xTemp[ i ];
		io += stride;
		i += 1;
	}

	return y;
}

/**
* Cumulatively tests whether at least one array element in a provided accessor array is truthy and assigns to given output array.
* @private
* @param {Object} x - input array object
* @param {Object} y - output array object
* @param {integer} stride - output array stride
* @param {NonNegativeInteger} offset - output array offset
* @returns {Collection} output array
*
* @example
* var toAccessorArray = require( '@stdlib/array/base/to-accessor-array' );
* var arraylike2object = require( '@stdlib/array/base/arraylike2object' );
*
* var x = toAccessorArray( [ false, false, true, false, false ] );
* var y = toAccessorArray( [ false, null, false, null, false, null, false, null, false, null ] );
*
* var arr = accessors( arraylike2object( x ), arraylike2object( y ), 2, 0 );
*
* var v = arr.accessors[0]( arr.data, 4 );
* // returns true
*/
function accessors( x, y, stride, offset ) {
	var xdata;
	var ydata;
	var xTemp;
	var xget;
	var yset;
	var xMax;
	var yMax;
	var flag;
	var io;
	var i;

	xdata = x.data;
	ydata = y.data;

	xget = x.accessors[ 0 ];
	yset = y.accessors[ 1 ];

	// Resolve an accessor for retrieving array elements:
	xget = x.accessors[0];
	xdata = x.data;

	// Resolve array length:
	xMax = x.data.length - 1;
	yMax = y.data.length - 1;

	// Initialize a flag:
	flag = false;
	xTemp = [ ];

	// Logic for cumulatively testing...
	for ( i = 0; i <= xMax; i++ ) {
		if ( xget( xdata, i ) ) {
			flag = true;
		}
		xTemp.push( ( ( flag ) ? ( true ) : ( xget( xdata, i ) ) ) );
	}

	// Perform assign operation...
	io = offset;
	i = 0;
	while ( io <= yMax && i <= xMax ) {
		yset( ydata, io, xTemp[ i ] );
		io += stride;
		i += 1;
	}

	return y;
}


// MAIN //

/**
* Cumulatively tests whether at least one array element in an array is truthy and assigns to given output array.
*
* @param {Collection} x - input array
* @param {Collection} y - output array
* @param {integer} stride - output array stride
* @param {NonNegativeInteger} offset - output array offset
* @returns {Collection} output array
*
* @example
* var x = [ false, false, true, false, false ];
* var y = [ false, null, false, null, false, null, false, null, false, null ];
*
* var arr = indexed( x, y, 2, 0 );
* // returns [ false, null, false, null, true, null, true, null, true, null ]
*/
function assign( x, y, stride, offset ) {
	var xo;
	var yo;

	xo = arraylike2object( x );
	yo = arraylike2object( y );

	if (
		xo.accessorProtocol ||
		yo.accessorProtocol
	) {
		accessors( xo, yo, stride, offset );
		return y;
	}
	indexed( x, y, stride, offset );
	return y;
}


// EXPORTS //

module.exports = assign;
